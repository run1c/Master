%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Feb 13 11:03:03 2014
%%Title: /Users/runic/Documents/Uni Krams/Master/Simulationen/amp_wo_sipm/amp_wo.sch
%%Author: runic
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
46600 47700 46500 47500 10 line
46500 47500 46400 47700 10 line
46400 47700 46300 47500 10 line
46300 47500 46200 47700 10 line
46600 47700 46700 47500 10 line
46700 47500 46750 47600 10 line
46900 47600 46750 47600 10 line
46000 47600 46152 47600 10 line
46201 47700 46150 47600 10 line
grestore
gsave
false false false false 260.000000 [(Ramp) ] 0 46100 47300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 46100 47100 180.555557 text
grestore
40800 48600 44500 48600 10 line
45600 47600 46000 47600 10 line
47300 47600 46900 47600 10 line
gsave
40200 50500 42100 50500 10 line
42100 50500 42100 50800 10 line
42100 50800 40200 50800 10 line
40200 50800 40200 50500 10 line
gsave
false false false false 260.000000 [(SPICE include) ] 0 40800 50600 180.555557 text
grestore
gsave
false false false false 260.000000 [(File:) ] 0 40300 50300 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A1) ] 0 40300 50600 180.555557 text
grestore
gsave
false false false false 260.000000 [(./Simulation.cmd) ] 0 40700 50300 180.555557 text
grestore
47300 48800 47300 47600 10 line
gsave
44200 49000 44400 49000 10 line
44200 49100 44200 48900 10 line
44150 49045 44150 48955 10 line
44110 49020 44110 48980 10 line
grestore
44400 49000 45800 49000 10 line
gsave
46300 49300 46300 49500 10 line
46150 49500 46450 49500 10 line
gsave
false false false false 208.000000 [(Vss) ] 0 46175 49550 144.444443 text
grestore
grestore
gsave
42700 47900 42700 48100 10 line
42550 48100 42850 48100 10 line
gsave
false false false false 208.000000 [(Vss) ] 0 42575 48150 144.444443 text
grestore
grestore
gsave
46300 48300 46300 48100 10 line
46450 48100 46150 48100 10 line
gsave
false true false true 208.000000 [(Vee) ] 0 46425 48050 144.444443 text
grestore
grestore
gsave
44000 47900 44000 48100 10 line
43850 48100 44150 48100 10 line
gsave
false false false false 208.000000 [(Vee) ] 0 43875 48150 144.444443 text
grestore
grestore
gsave
42700 47800 42700 47500 10 line
gsave
false false false false 208.000000 [(1) ] 0 42750 47600 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 42700 47450 144.444443 text
grestore
42700 46600 42700 46900 10 line
gsave
false false false false 208.000000 [(2) ] 0 42750 46700 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 42700 46950 144.444443 text
grestore
42700 47200 300 0 360 10 darc
42575 47225 42825 47225 10 line
42575 47175 42825 47175 10 line
grestore
gsave
false false false false 260.000000 [(Vss) ] 0 43100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(3.3V) ] 0 43100 47050 180.555557 text
grestore
42700 47800 42700 47900 10 line
46300 49300 46300 49200 10 line
46300 48300 46300 48400 10 line
gsave
46000 49200 46000 48400 10 line
46000 49200 46600 48800 10 line
46600 48800 46000 48400 10 line
46100 49050 46100 48950 10 line
46050 49000 46150 49000 10 line
46050 48600 46150 48600 10 line
45800 49000 46000 49000 10 line
gsave
false true false false 208.000000 [(1) ] 0 45950 49050 144.444443 text
grestore
45800 48600 46000 48600 10 line
gsave
false true false false 208.000000 [(2) ] 0 45950 48650 144.444443 text
grestore
46600 48800 46800 48800 10 line
gsave
false false false false 208.000000 [(5) ] 0 46600 48850 144.444443 text
grestore
46300 49000 46300 49200 10 line
gsave
false false false false 208.000000 [(3) ] 0 46350 49000 144.444443 text
grestore
46300 48600 46300 48400 10 line
gsave
false false false false 208.000000 [(4) ] 0 46350 48500 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(MAX4228) ] 0 46600 49100 180.555557 text
grestore
gsave
40200 49900 42000 49900 10 line
42000 49900 42000 50200 10 line
42000 50200 40200 50200 10 line
40200 50200 40200 49900 10 line
gsave
false false false false 260.000000 [(SPICE model) ] 0 40700 50000 180.555557 text
grestore
gsave
false false false false 260.000000 [(Model name:) ] 0 40300 49700 180.555557 text
grestore
gsave
false false false false 260.000000 [(File:) ] 0 40300 49500 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A2) ] 0 40300 50000 180.555557 text
grestore
gsave
false false false false 260.000000 [(MAX4223) ] 0 41500 49700 180.555557 text
grestore
gsave
false false false false 260.000000 [(./MAX4223.FAM) ] 0 40700 49500 180.555557 text
grestore
gsave
44000 47800 44000 47500 10 line
gsave
false false false false 208.000000 [(1) ] 0 44050 47600 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 44000 47450 144.444443 text
grestore
44000 46600 44000 46900 10 line
gsave
false false false false 208.000000 [(2) ] 0 44050 46700 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 44000 46950 144.444443 text
grestore
44000 47200 300 0 360 10 darc
43875 47225 44125 47225 10 line
43875 47175 44125 47175 10 line
grestore
gsave
false false false false 260.000000 [(Vee) ] 0 44400 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(-3.3V) ] 0 44400 47050 180.555557 text
grestore
44000 47900 44000 47800 10 line
gsave
42700 46300 42700 46500 10 line
42600 46300 42800 46300 10 line
42655 46250 42745 46250 10 line
42680 46210 42720 46210 10 line
grestore
gsave
44000 46300 44000 46500 10 line
43900 46300 44100 46300 10 line
43955 46250 44045 46250 10 line
43980 46210 44020 46210 10 line
grestore
gsave
45100 48700 45000 48500 10 line
45000 48500 44900 48700 10 line
44900 48700 44800 48500 10 line
44800 48500 44700 48700 10 line
45100 48700 45200 48500 10 line
45200 48500 45250 48600 10 line
45400 48600 45250 48600 10 line
44500 48600 44652 48600 10 line
44701 48700 44650 48600 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 44800 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(10) ] 0 44800 48100 180.555557 text
grestore
45400 48600 45800 48600 10 line
gsave
false false false false 260.000000 [(netname=Vin) ] 0 44800 48800 180.555557 text
grestore
45600 47600 45600 48600 10 line
gsave
53600 49000 53800 49000 10 line
54500 49000 54300 49000 10 line
54000 49200 54000 48800 10 line
54100 49200 54100 48800 10 line
54300 49000 54100 49000 10 line
54000 49000 53800 49000 10 line
grestore
gsave
false false false false 260.000000 [(C3) ] 0 53800 48500 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 53800 48300 180.555557 text
grestore
gsave
56700 49000 56500 49000 10 line
56700 48900 56700 49100 10 line
56750 48955 56750 49045 10 line
56790 48980 56790 49020 10 line
grestore
54500 49000 55300 49000 10 line
gsave
false false false false 260.000000 [(netname=Vout) ] 0 54200 49300 180.555557 text
grestore
42700 46500 42700 46600 10 line
44000 46500 44000 46600 10 line
gsave
51900 49400 51900 48600 10 line
51900 49400 52500 49000 10 line
52500 49000 51900 48600 10 line
52000 49250 52000 49150 10 line
51950 49200 52050 49200 10 line
51950 48800 52050 48800 10 line
51700 49200 51900 49200 10 line
gsave
false true false false 208.000000 [(1) ] 0 51850 49250 144.444443 text
grestore
51700 48800 51900 48800 10 line
gsave
false true false false 208.000000 [(2) ] 0 51850 48850 144.444443 text
grestore
52500 49000 52700 49000 10 line
gsave
false false false false 208.000000 [(5) ] 0 52500 49050 144.444443 text
grestore
52200 49200 52200 49400 10 line
gsave
false false false false 208.000000 [(3) ] 0 52250 49200 144.444443 text
grestore
52200 48800 52200 48600 10 line
gsave
false false false false 208.000000 [(4) ] 0 52250 48700 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(MAX4228) ] 0 52400 49500 180.555557 text
grestore
gsave
50600 49200 50800 49200 10 line
50600 49300 50600 49100 10 line
50550 49245 50550 49155 10 line
50510 49220 50510 49180 10 line
grestore
gsave
52200 49500 52200 49700 10 line
52050 49700 52350 49700 10 line
gsave
false false false false 208.000000 [(Vss) ] 0 52075 49750 144.444443 text
grestore
grestore
gsave
52200 48500 52200 48300 10 line
52350 48300 52050 48300 10 line
gsave
false true false true 208.000000 [(Vee) ] 0 52325 48250 144.444443 text
grestore
grestore
52200 48500 52200 48600 10 line
52200 49500 52200 49400 10 line
50800 49200 51700 49200 10 line
gsave
52500 47700 52400 47500 10 line
52400 47500 52300 47700 10 line
52300 47700 52200 47500 10 line
52200 47500 52100 47700 10 line
52500 47700 52600 47500 10 line
52600 47500 52650 47600 10 line
52800 47600 52650 47600 10 line
51900 47600 52052 47600 10 line
52101 47700 52050 47600 10 line
grestore
gsave
false false false false 260.000000 [(Rdiffamp) ] 0 52000 47300 180.555557 text
grestore
gsave
false false false false 260.000000 [(240) ] 0 52000 47100 180.555557 text
grestore
gsave
49300 48800 49500 48800 10 line
50200 48800 50000 48800 10 line
49700 49000 49700 48600 10 line
49800 49000 49800 48600 10 line
50000 48800 49800 48800 10 line
49700 48800 49500 48800 10 line
grestore
gsave
false false false false 260.000000 [(Cdiff) ] 0 49500 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(100pF) ] 0 49500 48100 180.555557 text
grestore
46800 48800 49300 48800 10 line
gsave
false false false false 260.000000 [(netname=Vampout) ] 0 47600 49000 180.555557 text
grestore
51500 48800 51500 47600 10 line
51500 47600 51900 47600 10 line
52800 47600 53200 47600 10 line
53200 47600 53200 49000 10 line
52700 49000 53600 49000 10 line
gsave
false false false false 260.000000 [(netname=Vdiffout) ] 0 52500 49300 180.555557 text
grestore
gsave
51000 48900 50900 48700 10 line
50900 48700 50800 48900 10 line
50800 48900 50700 48700 10 line
50700 48700 50600 48900 10 line
51000 48900 51100 48700 10 line
51100 48700 51150 48800 10 line
51300 48800 51150 48800 10 line
50400 48800 50552 48800 10 line
50601 48900 50550 48800 10 line
grestore
gsave
false false false false 260.000000 [(Rdiff) ] 0 50600 48500 180.555557 text
grestore
gsave
false false false false 260.000000 [(62) ] 0 50600 48300 180.555557 text
grestore
50400 48800 50200 48800 10 line
51300 48800 51700 48800 10 line
gsave
40800 43400 40800 43600 10 line
40700 43400 40900 43400 10 line
40755 43350 40845 43350 10 line
40780 43310 40820 43310 10 line
grestore
gsave
55900 49100 55800 48900 10 line
55800 48900 55700 49100 10 line
55700 49100 55600 48900 10 line
55600 48900 55500 49100 10 line
55900 49100 56000 48900 10 line
56000 48900 56050 49000 10 line
56200 49000 56050 49000 10 line
55300 49000 55452 49000 10 line
55501 49100 55450 49000 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 0 55500 48700 180.555557 text
grestore
gsave
false false false false 260.000000 [(50) ] 0 55500 48500 180.555557 text
grestore
56200 49000 56500 49000 10 line
gsave
40800 45000 40800 44700 10 line
gsave
false false false false 208.000000 [(1) ] 0 40850 44800 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 40800 44650 144.444443 text
grestore
40800 43800 40800 44100 10 line
gsave
false false false false 208.000000 [(2) ] 0 40850 43900 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 40800 44150 144.444443 text
grestore
40800 44400 300 0 360 10 darc
40730 44375 75 19 160 10 darc
40870 44425 75 199 340 10 darc
grestore
gsave
false false false false 260.000000 [(V0) ] 0 41200 44450 180.555557 text
grestore
gsave
false false false false 260.000000 [(dc 0 ac 10uA) ] 0 41200 44250 180.555557 text
grestore
40800 43600 40800 43800 10 line
gsave
40800 46400 40800 46100 10 line
gsave
false false false false 208.000000 [(1) ] 0 40850 46200 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 40800 46050 144.444443 text
grestore
40800 45200 40800 45500 10 line
gsave
false false false false 208.000000 [(2) ] 0 40850 45300 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 40800 45550 144.444443 text
grestore
40800 45800 300 0 360 10 darc
40675 45825 40925 45825 10 line
40675 45775 40925 45775 10 line
grestore
gsave
false false false false 260.000000 [(Isipm) ] 0 41200 45850 180.555557 text
grestore
gsave
false false false false 260.000000 [(DC 1mA AC 0 EXP\(0 -1.582mA 10ns 8ns 15ns 20ns\)) ] 0 41200 45650 180.555557 text
grestore
40800 45200 40800 45000 10 line
gsave
40800 47800 40800 47500 10 line
gsave
false false false false 208.000000 [(1) ] 0 40850 47600 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 40800 47450 144.444443 text
grestore
40800 46600 40800 46900 10 line
gsave
false false false false 208.000000 [(2) ] 0 40850 46700 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 40800 46950 144.444443 text
grestore
40800 47200 300 0 360 10 darc
40675 47225 40925 47225 10 line
40675 47175 40925 47175 10 line
grestore
gsave
false false false false 260.000000 [(Vimeas) ] 0 41200 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(DC 0V) ] 0 41200 47050 180.555557 text
grestore
40800 46600 40800 46400 10 line
40800 47800 40800 48600 10 line
newpath
47300 48800
25
0 360 arc
fill
newpath
47300 48800
25
0 360 arc
fill
newpath
45600 48600
25
0 360 arc
fill
newpath
45600 48600
25
0 360 arc
fill
newpath
45600 48600
25
0 360 arc
fill
newpath
47300 48800
25
0 360 arc
fill
newpath
51500 48800
25
0 360 arc
fill
newpath
51500 48800
25
0 360 arc
fill
newpath
53200 49000
25
0 360 arc
fill
newpath
53200 49000
25
0 360 arc
fill
newpath
53200 49000
25
0 360 arc
fill
newpath
51500 48800
25
0 360 arc
fill
showpage
%%End
