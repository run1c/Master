%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Tue Feb 25 15:49:53 2014
%%Title: /Users/runic/Documents/Uni Krams/Master/Simulationen/u_bias/u_bias.sch
%%Author: runic
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
47400 45300 47400 46100 10 line
47400 45300 46800 45700 10 line
46800 45700 47400 46100 10 line
47300 45450 47300 45550 10 line
47350 45500 47250 45500 10 line
47350 45900 47250 45900 10 line
47600 45500 47400 45500 10 line
gsave
false false false true 208.000000 [(1) ] 0 47450 45450 144.444443 text
grestore
47600 45900 47400 45900 10 line
gsave
false false false true 208.000000 [(2) ] 0 47450 45850 144.444443 text
grestore
46800 45700 46600 45700 10 line
gsave
false true false true 208.000000 [(5) ] 0 46800 45650 144.444443 text
grestore
47100 45500 47100 45300 10 line
gsave
false true false true 208.000000 [(3) ] 0 47050 45500 144.444443 text
grestore
47100 45900 47100 46100 10 line
gsave
false true false true 208.000000 [(4) ] 0 47050 46000 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(Xamp) ] 0 47500 46200 180.555557 text
grestore
gsave
false false false false 260.000000 [(MAX4040) ] 0 47500 46000 180.555557 text
grestore
gsave
47100 46100 47100 46300 10 line
46950 46300 47250 46300 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 46975 46350 144.444443 text
grestore
grestore
gsave
47100 45100 47100 45300 10 line
47000 45100 47200 45100 10 line
47055 45050 47145 45050 10 line
47080 45010 47120 45010 10 line
grestore
gsave
44700 48300 44100 48300 10 line
44400 48100 44400 48300 10 line
gsave
false true false false 156.000000 [(B) ] 270 44450 48200 108.333336 text
grestore
44900 48600 44700 48600 10 line
gsave
false true false false 156.000000 [(C) ] 270 44750 48500 108.333336 text
grestore
44100 48600 43900 48600 10 line
gsave
false true false false 156.000000 [(E) ] 270 43950 48500 108.333336 text
grestore
44250 48300 44100 48600 10 line
44550 48300 44700 48600 10 line
10 setlinewidth
44241 48397 moveto 44250 48300 lineto 44177 48369 lineto 44211 48377 lineto closepath stroke
44241 48397 moveto 44250 48300 lineto 44177 48369 lineto 44211 48377 lineto closepath fill
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 44200 48900 180.555557 text
grestore
gsave
false false false false 260.000000 [(BFN27) ] 0 44200 48700 180.555557 text
grestore
gsave
44700 46000 44700 45400 10 line
44900 45700 44700 45700 10 line
gsave
false true false false 156.000000 [(B) ] 0 44800 45750 108.333336 text
grestore
44400 46200 44400 46000 10 line
gsave
false true false false 156.000000 [(C) ] 0 44500 46050 108.333336 text
grestore
44400 45400 44400 45200 10 line
gsave
false true false false 156.000000 [(E) ] 0 44500 45250 108.333336 text
grestore
44700 45850 44400 46000 10 line
44700 45550 44400 45400 10 line
10 setlinewidth
44497 45409 moveto 44399 45400 lineto 44469 45473 lineto 44475 45440 lineto closepath stroke
44497 45409 moveto 44399 45400 lineto 44469 45473 lineto 44475 45440 lineto closepath fill
grestore
gsave
false false false false 260.000000 [(Q0) ] 0 43900 45800 180.555557 text
grestore
gsave
false false false false 260.000000 [(BFN26) ] 0 43900 45600 180.555557 text
grestore
gsave
46000 45700 45850 45700 10 line
45100 45700 45250 45700 10 line
45250 45600 45850 45600 10 line
45850 45600 45850 45800 10 line
45850 45800 45250 45800 10 line
45250 45800 45250 45600 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 45300 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 45300 45900 180.555557 text
grestore
gsave
48200 46800 48050 46800 10 line
47300 46800 47450 46800 10 line
47450 46700 48050 46700 10 line
48050 46700 48050 46900 10 line
48050 46900 47450 46900 10 line
47450 46900 47450 46700 10 line
grestore
gsave
false false false false 260.000000 [(R0) ] 0 47500 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 47500 47000 180.555557 text
grestore
gsave
44400 44000 44400 44150 10 line
44400 44900 44400 44750 10 line
44300 44150 44500 44150 10 line
44500 44150 44500 44750 10 line
44500 44750 44300 44750 10 line
44300 44750 44300 44150 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 43900 44600 180.555557 text
grestore
gsave
false false false false 260.000000 [(4.7k) ] 0 43900 44400 180.555557 text
grestore
gsave
44400 46500 44400 46650 10 line
44400 47400 44400 47250 10 line
44300 46650 44500 46650 10 line
44500 46650 44500 47250 10 line
44500 47250 44300 47250 10 line
44300 47250 44300 46650 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 0 44700 47100 180.555557 text
grestore
gsave
false false false false 260.000000 [(100k) ] 0 44700 46900 180.555557 text
grestore
gsave
44200 47800 44050 47800 10 line
43300 47800 43450 47800 10 line
43450 47700 44050 47700 10 line
44050 47700 44050 47900 10 line
44050 47900 43450 47900 10 line
43450 47900 43450 47700 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 0 43500 47500 180.555557 text
grestore
gsave
false false false false 260.000000 [(4.7k) ] 0 43500 47300 180.555557 text
grestore
gsave
49300 44200 49300 44350 10 line
49300 45100 49300 44950 10 line
49200 44350 49400 44350 10 line
49400 44350 49400 44950 10 line
49400 44950 49200 44950 10 line
49200 44950 49200 44350 10 line
grestore
gsave
false false false false 260.000000 [(R6) ] 0 49500 44800 180.555557 text
grestore
gsave
false false false false 260.000000 [(18k) ] 0 49500 44600 180.555557 text
grestore
gsave
49300 46800 49300 46950 10 line
49300 47700 49300 47550 10 line
49200 46950 49400 46950 10 line
49400 46950 49400 47550 10 line
49400 47550 49200 47550 10 line
49200 47550 49200 46950 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 0 49500 47400 180.555557 text
grestore
gsave
false false false false 260.000000 [(500k) ] 0 49500 47200 180.555557 text
grestore
gsave
46300 46800 46500 46800 10 line
47200 46800 47000 46800 10 line
46700 47000 46700 46600 10 line
46800 47000 46800 46600 10 line
47000 46800 46800 46800 10 line
46700 46800 46500 46800 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 0 46400 47300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1nF) ] 0 46400 47100 180.555557 text
grestore
gsave
47900 45100 47900 44900 10 line
47900 44200 47900 44400 10 line
48100 44700 47700 44700 10 line
48100 44600 47700 44600 10 line
47900 44400 47900 44600 10 line
47900 44700 47900 44900 10 line
grestore
gsave
false false false false 260.000000 [(C0) ] 0 48100 44700 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 48100 44500 180.555557 text
grestore
gsave
45100 45000 45100 44800 10 line
45100 44100 45100 44300 10 line
45300 44600 44900 44600 10 line
45300 44500 44900 44500 10 line
45100 44300 45100 44500 10 line
45100 44600 45100 44800 10 line
grestore
gsave
false false false false 260.000000 [(C2) ] 0 45300 44600 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 45300 44400 180.555557 text
grestore
46000 45700 46600 45700 10 line
45100 45700 44900 45700 10 line
gsave
false false false false 260.000000 [(netname=AmpOut) ] 0 45000 45400 180.555557 text
grestore
44400 44900 44400 45200 10 line
44400 46500 44400 46200 10 line
44400 48100 44400 47400 10 line
44200 47800 44400 47800 10 line
44400 45100 45100 45100 10 line
45100 45100 45100 45000 10 line
44400 44000 44400 43800 10 line
43000 43800 49300 43800 10 line
45100 43800 45100 44100 10 line
46300 45700 46300 46800 10 line
47900 43800 47900 44200 10 line
47900 45100 47900 45500 10 line
47900 45500 47600 45500 10 line
47600 45900 49300 45900 10 line
48200 45900 48200 46800 10 line
47200 46800 47300 46800 10 line
44900 48600 49700 48600 10 line
gsave
false false false false 260.000000 [(netname=BiasOut) ] 0 47500 48700 180.555557 text
grestore
49300 48600 49300 47700 10 line
49300 46800 49300 45100 10 line
gsave
false false false false 260.000000 [(netname=feedback) ] 0 49600 46000 180.555557 text
grestore
49300 43800 49300 44200 10 line
43900 48600 42600 48600 10 line
gsave
false false false false 260.000000 [(netname=BiasIn) ] 0 42600 48700 180.555557 text
grestore
43300 47800 43000 47800 10 line
43000 45600 43000 48600 10 line
gsave
42600 48600 42400 48600 10 line
42400 48450 42400 48750 10 line
gsave
false false false false 208.000000 [(Vss) ] 90 42350 48475 144.444443 text
grestore
grestore
gsave
47900 45500 48100 45500 10 line
48100 45650 48100 45350 10 line
gsave
false false false false 208.000000 [(Vee) ] 270 48150 45625 144.444443 text
grestore
grestore
gsave
49300 43600 49300 43800 10 line
49200 43600 49400 43600 10 line
49255 43550 49345 43550 10 line
49280 43510 49320 43510 10 line
grestore
gsave
44400 43000 44400 42700 10 line
gsave
false false false false 208.000000 [(1) ] 0 44450 42800 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 44400 42650 144.444443 text
grestore
44400 41800 44400 42100 10 line
gsave
false false false false 208.000000 [(2) ] 0 44450 41900 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 44400 42150 144.444443 text
grestore
44400 42400 300 0 360 10 darc
44275 42425 44525 42425 10 line
44275 42375 44525 42375 10 line
grestore
gsave
false false false false 260.000000 [(Vcc) ] 0 44800 42450 180.555557 text
grestore
gsave
false false false false 260.000000 [(DC 3.3V) ] 0 44800 42250 180.555557 text
grestore
gsave
45900 43000 45900 42700 10 line
gsave
false false false false 208.000000 [(1) ] 0 45950 42800 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 45900 42650 144.444443 text
grestore
45900 41800 45900 42100 10 line
gsave
false false false false 208.000000 [(2) ] 0 45950 41900 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 45900 42150 144.444443 text
grestore
45900 42400 300 0 360 10 darc
45775 42425 46025 42425 10 line
45775 42375 46025 42375 10 line
grestore
gsave
false false false false 260.000000 [(Vss) ] 0 46300 42450 180.555557 text
grestore
gsave
false false false false 260.000000 [(DC 80V) ] 0 46300 42250 180.555557 text
grestore
gsave
47400 43000 47400 42700 10 line
gsave
false false false false 208.000000 [(1) ] 0 47450 42800 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 47400 42650 144.444443 text
grestore
47400 41800 47400 42100 10 line
gsave
false false false false 208.000000 [(2) ] 0 47450 41900 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 47400 42150 144.444443 text
grestore
47400 42400 300 0 360 10 darc
47330 42375 75 19 160 10 darc
47470 42425 75 199 340 10 darc
grestore
gsave
false false false false 260.000000 [(Vdac) ] 0 47800 42450 180.555557 text
grestore
gsave
false false false false 260.000000 [(dc 0 ac 1 PULSE\(0V 2.52V 10ns 50us 10us 20ms\)) ] 0 47800 42250 180.555557 text
grestore
gsave
47400 43000 47400 43200 10 line
47250 43200 47550 43200 10 line
gsave
false false false false 208.000000 [(Vee) ] 0 47275 43250 144.444443 text
grestore
grestore
gsave
44400 43000 44400 43200 10 line
44250 43200 44550 43200 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 44275 43250 144.444443 text
grestore
grestore
gsave
45900 43000 45900 43200 10 line
45750 43200 46050 43200 10 line
gsave
false false false false 208.000000 [(Vss) ] 0 45775 43250 144.444443 text
grestore
grestore
gsave
44400 41600 44400 41800 10 line
44300 41600 44500 41600 10 line
44355 41550 44445 41550 10 line
44380 41510 44420 41510 10 line
grestore
gsave
45900 41600 45900 41800 10 line
45800 41600 46000 41600 10 line
45855 41550 45945 41550 10 line
45880 41510 45920 41510 10 line
grestore
gsave
47400 41600 47400 41800 10 line
47300 41600 47500 41600 10 line
47355 41550 47445 41550 10 line
47380 41510 47420 41510 10 line
grestore
gsave
40500 50100 42300 50100 10 line
42300 50100 42300 50400 10 line
42300 50400 40500 50400 10 line
40500 50400 40500 50100 10 line
gsave
false false false false 260.000000 [(SPICE model) ] 0 41000 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Model name:) ] 0 40600 49900 180.555557 text
grestore
gsave
false false false false 260.000000 [(File:) ] 0 40600 49700 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A0) ] 0 40600 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(MAX4040) ] 0 41800 49900 180.555557 text
grestore
gsave
false false false false 260.000000 [(./MAX4040.cir) ] 0 41000 49700 180.555557 text
grestore
gsave
40500 49300 42400 49300 10 line
42400 49300 42400 49600 10 line
42400 49600 40500 49600 10 line
40500 49600 40500 49300 10 line
gsave
false false false false 260.000000 [(SPICE include) ] 0 41100 49400 180.555557 text
grestore
gsave
false false false false 260.000000 [(File:) ] 0 40600 49100 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A1) ] 0 40600 49400 180.555557 text
grestore
gsave
false false false false 260.000000 [(./infineon_transistors.lib) ] 0 41000 49100 180.555557 text
grestore
gsave
52700 49500 52700 49300 10 line
52700 48600 52700 48800 10 line
52900 49100 52500 49100 10 line
52900 49000 52500 49000 10 line
52700 48800 52700 49000 10 line
52700 49100 52700 49300 10 line
newpath
52700 48600
25
0 360 arc
fill
newpath
52700 48600
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(CP1) ] 0 52900 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 52900 48900 180.555557 text
grestore
gsave
51000 49500 51000 49300 10 line
51000 48600 51000 48800 10 line
51200 49100 50800 49100 10 line
51200 49000 50800 49000 10 line
51000 48800 51000 49000 10 line
51000 49100 51000 49300 10 line
newpath
51000 48600
25
0 360 arc
fill
newpath
51000 48600
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(CP0) ] 0 51200 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 51200 48900 180.555557 text
grestore
gsave
51000 50000 51000 49800 10 line
51100 50000 50900 50000 10 line
51045 50050 50955 50050 10 line
51020 50090 50980 50090 10 line
grestore
51000 49500 51000 49800 10 line
51000 49500 52700 49500 10 line
gsave
50600 48600 50450 48600 10 line
49700 48600 49850 48600 10 line
49850 48500 50450 48500 10 line
50450 48500 50450 48700 10 line
50450 48700 49850 48700 10 line
49850 48700 49850 48500 10 line
grestore
gsave
false false false false 260.000000 [(RP0) ] 0 49900 49000 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 49900 48800 180.555557 text
grestore
gsave
52300 48600 52150 48600 10 line
51400 48600 51550 48600 10 line
51550 48500 52150 48500 10 line
52150 48500 52150 48700 10 line
52150 48700 51550 48700 10 line
51550 48700 51550 48500 10 line
grestore
gsave
false false false false 260.000000 [(RP1) ] 0 51600 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 51600 48100 180.555557 text
grestore
50600 48600 51400 48600 10 line
52300 48600 53300 48600 10 line
gsave
false false false false 260.000000 [(netname=BiasOut2) ] 0 52000 47600 180.555557 text
grestore
gsave
43000 45600 43000 45400 10 line
43000 44700 43000 44900 10 line
43200 45200 42800 45200 10 line
43200 45100 42800 45100 10 line
43000 44900 43000 45100 10 line
43000 45200 43000 45400 10 line
grestore
gsave
false false false false 260.000000 [(C3) ] 0 43200 45200 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 43200 45000 180.555557 text
grestore
43000 43800 43000 44700 10 line
gsave
54900 48600 54700 48600 10 line
54900 48500 54900 48700 10 line
54950 48555 54950 48645 10 line
54990 48580 54990 48620 10 line
grestore
gsave
54200 48600 54050 48600 10 line
53300 48600 53450 48600 10 line
53450 48500 54050 48500 10 line
54050 48500 54050 48700 10 line
54050 48700 53450 48700 10 line
53450 48700 53450 48500 10 line
grestore
gsave
false false false false 260.000000 [(RSIPM) ] 0 53500 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(70MEG) ] 0 53500 48100 180.555557 text
grestore
54200 48600 54700 48600 10 line
gsave
false false false false 260.000000 [(netname=Base) ] 0 44600 47700 180.555557 text
grestore
newpath
46300 45700
25
0 360 arc
fill
newpath
44400 45100
25
0 360 arc
fill
newpath
44400 47800
25
0 360 arc
fill
newpath
44400 47800
25
0 360 arc
fill
newpath
44400 47800
25
0 360 arc
fill
newpath
44400 45100
25
0 360 arc
fill
newpath
44400 45100
25
0 360 arc
fill
newpath
44400 43800
25
0 360 arc
fill
newpath
44400 43800
25
0 360 arc
fill
newpath
49300 43800
25
0 360 arc
fill
newpath
44400 43800
25
0 360 arc
fill
newpath
45100 43800
25
0 360 arc
fill
newpath
47900 43800
25
0 360 arc
fill
newpath
45100 43800
25
0 360 arc
fill
newpath
45100 43800
25
0 360 arc
fill
newpath
46300 45700
25
0 360 arc
fill
newpath
46300 45700
25
0 360 arc
fill
newpath
47900 43800
25
0 360 arc
fill
newpath
47900 43800
25
0 360 arc
fill
newpath
47900 45500
25
0 360 arc
fill
newpath
47900 45500
25
0 360 arc
fill
newpath
49300 45900
25
0 360 arc
fill
newpath
48200 45900
25
0 360 arc
fill
newpath
49300 45900
25
0 360 arc
fill
newpath
48200 45900
25
0 360 arc
fill
newpath
48200 45900
25
0 360 arc
fill
newpath
49300 48600
25
0 360 arc
fill
newpath
49300 48600
25
0 360 arc
fill
newpath
49300 48600
25
0 360 arc
fill
newpath
49300 45900
25
0 360 arc
fill
newpath
49300 43800
25
0 360 arc
fill
newpath
43000 48600
25
0 360 arc
fill
newpath
43000 47800
25
0 360 arc
fill
newpath
43000 47800
25
0 360 arc
fill
newpath
43000 48600
25
0 360 arc
fill
newpath
43000 48600
25
0 360 arc
fill
newpath
43000 47800
25
0 360 arc
fill
newpath
52700 48600
25
0 360 arc
fill
newpath
52700 48600
25
0 360 arc
fill
newpath
51000 48600
25
0 360 arc
fill
newpath
51000 48600
25
0 360 arc
fill
newpath
51000 49500
25
0 360 arc
fill
newpath
51000 49500
25
0 360 arc
fill
newpath
51000 48600
25
0 360 arc
fill
newpath
52700 48600
25
0 360 arc
fill
showpage
%%End
