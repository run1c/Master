%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Mar 10 16:53:18 2014
%%Title: /Users/runic/Documents/Uni Krams/Master/MPPC_D2/layout/block_diagram.sch
%%Author: runic
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
41700 42200 41500 42200 10 line
42300 42200 42500 42200 10 line
41700 41800 41700 42600 10 line
41700 42600 42300 42200 10 line
42300 42200 41700 41800 10 line
grestore
gsave
false false false false 260.000000 [(PreAmp) ] 0 41700 42700 180.555557 text
grestore
gsave
false false false false 260.000000 [(G=1k) ] 0 41800 41700 180.555557 text
grestore
gsave
44200 42200 44000 42200 10 line
44800 42200 45000 42200 10 line
44200 41800 44200 42600 10 line
44200 42600 44800 42200 10 line
44800 42200 44200 41800 10 line
grestore
gsave
false false false false 260.000000 [(DiffAmp) ] 0 44200 42700 180.555557 text
grestore
gsave
false false false false 260.000000 [(G=4) ] 0 44300 41700 180.555557 text
grestore
gsave
44200 44700 44000 44700 10 line
44800 44700 45000 44700 10 line
44200 44300 44200 45100 10 line
44200 45100 44800 44700 10 line
44800 44700 44200 44300 10 line
grestore
gsave
false false false false 260.000000 [(HighGainAmp) ] 0 43900 45200 180.555557 text
grestore
gsave
false false false false 260.000000 [(G=10) ] 0 44300 44200 180.555557 text
grestore
gsave
41000 43950 41000 44150 10 line
41000 44850 41000 44650 10 line
40900 44350 41000 44450 10 line
41000 44450 41100 44350 10 line
40900 44350 41100 44350 10 line
40900 44450 41100 44450 10 line
41000 44450 41000 44650 10 line
41000 44350 41000 44150 10 line
41000 44400 200 0 360 10 darc
40719 44652 40654 44605 10 line
40582 44776 40595 44692 10 line
40729 44572 40582 44776 10 line
40730 44571 40719 44652 10 line
40654 44605 40730 44571 10 line
40595 44692 40463 44848 10 line
40715 44491 40650 44444 10 line
40578 44615 40591 44531 10 line
40725 44411 40578 44615 10 line
40726 44410 40715 44491 10 line
40650 44444 40726 44410 10 line
40591 44531 40459 44687 10 line
grestore
gsave
false true false true 260.000000 [(SiPM) ] 0 41600 44850 180.555557 text
grestore
gsave
41000 41900 41000 41750 10 line
41000 41000 41000 41150 10 line
40900 41150 41100 41150 10 line
41100 41150 41100 41750 10 line
41100 41750 40900 41750 10 line
40900 41750 40900 41150 10 line
grestore
gsave
false false false false 260.000000 [(10k) ] 0 41100 41000 180.555557 text
grestore
gsave
41000 40500 41000 40700 10 line
40900 40500 41100 40500 10 line
40955 40450 41045 40450 10 line
40980 40410 41020 40410 10 line
grestore
41000 40700 41000 41000 10 line
41000 41900 41000 43950 10 line
41500 42200 41000 42200 10 line
43000 42200 43000 44700 10 line
43000 44700 44000 44700 10 line
41000 44850 41000 46200 10 line
gsave
45900 42200 46100 42200 10 line
46800 42200 46600 42200 10 line
46300 42400 46300 42000 10 line
46400 42400 46400 42000 10 line
46600 42200 46400 42200 10 line
46300 42200 46100 42200 10 line
grestore
gsave
43100 42200 43300 42200 10 line
44000 42200 43800 42200 10 line
43500 42400 43500 42000 10 line
43600 42400 43600 42000 10 line
43800 42200 43600 42200 10 line
43500 42200 43300 42200 10 line
grestore
42500 42200 43100 42200 10 line
45900 42200 45000 42200 10 line
gsave
48040 42200 47700 42200 10 line
48140 42200 100 0 360 10 darc
grestore
gsave
false false false true 260.000000 [(OUT) ] 0 47950 41950 180.555557 text
grestore
gsave
46200 45400 47000 45400 10 line
47000 45400 47000 46200 10 line
47000 46200 46200 46200 10 line
46200 46200 46200 45400 10 line
46200 46000 46000 46000 10 line
47000 45800 47200 45800 10 line
46400 46100 46400 45500 10 line
46400 45500 46900 45800 10 line
46900 45800 46400 46100 10 line
46200 45600 46000 45600 10 line
46260 46000 46340 46000 10 line
46300 46040 46300 45960 10 line
46260 45600 46340 45600 10 line
grestore
gsave
46200 44500 47000 44500 10 line
47000 44500 47000 45300 10 line
47000 45300 46200 45300 10 line
46200 45300 46200 44500 10 line
46200 45100 46000 45100 10 line
47000 44900 47200 44900 10 line
46400 45200 46400 44600 10 line
46400 44600 46900 44900 10 line
46900 44900 46400 45200 10 line
46200 44700 46000 44700 10 line
46260 45100 46340 45100 10 line
46300 45140 46300 45060 10 line
46260 44700 46340 44700 10 line
grestore
45000 44700 46000 44700 10 line
45500 44700 45500 45600 10 line
45500 45600 46000 45600 10 line
46800 42200 47700 42200 10 line
gsave
47400 44500 48200 44500 10 line
48200 44500 48200 45300 10 line
48200 45300 47400 45300 10 line
47400 45300 47400 44500 10 line
47200 44900 47400 44900 10 line
48400 44900 48200 44900 10 line
grestore
gsave
false false false false 260.000000 [(Ctr1) ] 0 47495 45000 180.555557 text
grestore
gsave
47400 45400 48200 45400 10 line
48200 45400 48200 46200 10 line
48200 46200 47400 46200 10 line
47400 46200 47400 45400 10 line
47200 45800 47400 45800 10 line
48400 45800 48200 45800 10 line
grestore
gsave
false false false false 260.000000 [(Ctr0) ] 0 47495 45900 180.555557 text
grestore
gsave
48400 44900 48600 44900 10 line
49600 45700 49400 45700 10 line
gsave
false false false false 260.000000 [(SCK) ] 0 49500 45500 180.555557 text
grestore
49600 44900 49400 44900 10 line
gsave
false false false false 260.000000 [(SDA) ] 0 49500 44700 180.555557 text
grestore
48400 45800 48600 45800 10 line
48600 44500 49400 44500 10 line
49400 44500 49400 46200 10 line
49400 46200 48600 46200 10 line
48600 46200 48600 44500 10 line
grestore
gsave
false false false false 260.000000 [(I2C I/O) ] 0 48695 45900 180.555557 text
grestore
gsave
41300 47000 41300 46400 10 line
41500 46700 41300 46700 10 line
gsave
false true false false 156.000000 [(B) ] 0 41400 46750 108.333336 text
grestore
41000 47200 41000 47000 10 line
gsave
false true false false 156.000000 [(C) ] 0 41100 47050 108.333336 text
grestore
41000 46400 41000 46200 10 line
gsave
false true false false 156.000000 [(E) ] 0 41100 46250 108.333336 text
grestore
41300 46850 41000 47000 10 line
41300 46550 41000 46400 10 line
10 setlinewidth
41097 46409 moveto 40999 46400 lineto 41069 46473 lineto 41075 46440 lineto closepath stroke
41097 46409 moveto 40999 46400 lineto 41069 46473 lineto 41075 46440 lineto closepath fill
grestore
40600 46200 41600 46200 10 line
41600 46200 41600 47200 10 line
41600 47200 40600 47200 10 line
40600 47200 40600 46200 10 line
gsave
53700 49900 53400 49900 10 line
gsave
false true false false 208.000000 [(2) ] 0 54850 49850 144.444443 text
grestore
53700 49300 53400 49300 10 line
gsave
false true false false 208.000000 [(4) ] 0 54850 49250 144.444443 text
grestore
53700 48700 53400 48700 10 line
gsave
false true false false 208.000000 [(6) ] 0 54850 48650 144.444443 text
grestore
53700 50200 53400 50200 10 line
gsave
false true false false 208.000000 [(1) ] 0 54850 50150 144.444443 text
grestore
53700 49600 53400 49600 10 line
gsave
false true false false 208.000000 [(3) ] 0 54850 49550 144.444443 text
grestore
53700 49000 53400 49000 10 line
gsave
false true false false 208.000000 [(5) ] 0 54850 48950 144.444443 text
grestore
53700 50200 54600 50200 10 line
53700 49900 54600 49900 10 line
53700 49600 54600 49600 10 line
53700 49300 54600 49300 10 line
53700 49000 54600 49000 10 line
53700 48700 54600 48700 10 line
54600 48500 55100 48500 10 line
55100 48500 55100 50400 10 line
55100 50400 54600 50400 10 line
54600 50400 54600 48500 10 line
grestore
gsave
false true false false 260.000000 [(POWER AND SLOW CONTROL CONNECTOR) ] 0 56700 50600 180.555557 text
grestore
45300 47100 46100 47100 10 line
46100 47100 46100 47900 10 line
46100 47900 45300 47900 10 line
45300 47900 45300 47100 10 line
46000 46000 45900 46000 10 line
45900 46000 45900 46900 10 line
46000 45100 45700 45100 10 line
45700 45100 45700 46900 10 line
45700 46900 45700 47100 10 line
45900 46900 45900 47100 10 line
45500 46900 45500 47100 10 line
41500 46700 45500 46700 10 line
45500 46700 45500 46900 10 line
gsave
false false false false 260.000000 [(DAC) () ] 0 45500 47400 180.555557 text
grestore
46300 47300 46100 47300 10 line
gsave
false false false true 260.000000 [(SDA) ] 0 46155 47205 180.555557 text
grestore
46300 47700 46100 47700 10 line
gsave
false true false false 260.000000 [(SCK) ] 0 46545 47495 180.555557 text
grestore
53400 50200 41000 50200 10 line
41000 50200 41000 47200 10 line
50000 48200 51000 48200 10 line
51000 48200 51000 49200 10 line
51000 49200 50000 49200 10 line
50000 49200 50000 48200 10 line
46300 47700 50300 47700 10 line
50300 43700 50300 48000 10 line
46300 47300 50700 47300 10 line
50700 43300 50700 48000 10 line
49600 45700 50300 45700 10 line
49600 44900 50700 44900 10 line
50300 48000 50300 48200 10 line
gsave
false true false true 260.000000 [(SCK) ] 0 50245 48100 180.555557 text
grestore
50700 48000 50700 48200 10 line
gsave
false true false true 260.000000 [(SDA) ] 0 51145 48100 180.555557 text
grestore
51200 49000 51000 49000 10 line
gsave
false false false true 260.000000 [(RXT+) ] 0 51155 48905 180.555557 text
grestore
51200 48700 51000 48700 10 line
gsave
false false false true 260.000000 [(RXT-) ] 0 51155 48605 180.555557 text
grestore
51200 49000 53400 49000 10 line
51200 48700 53400 48700 10 line
gsave
false false false false 260.000000 [(MCU) ] 0 50300 48700 180.555557 text
grestore
gsave
false false false false 208.000000 [(HV+) ] 0 54000 50050 144.444443 text
grestore
gsave
false false false false 208.000000 [(LV-) ] 0 54000 49750 144.444443 text
grestore
gsave
false false false false 208.000000 [(LV+) ] 0 54000 49450 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 54000 49150 144.444443 text
grestore
gsave
false false false false 208.000000 [(RS485+) ] 0 54000 48850 144.444443 text
grestore
gsave
false false false false 208.000000 [(RS485-) ] 0 54000 48550 144.444443 text
grestore
gsave
false false false false 260.000000 [(BIAS VOLTAGE REGULATOR) ] 0 41150 47350 180.555557 text
grestore
gsave
false false false false 208.000000 [(~82V) ] 0 48350 50250 144.444443 text
grestore
gsave
false false false false 260.000000 [(COMPARATORS AND COUNTERS) ] 0 46350 46450 180.555557 text
grestore
48600 43100 49400 43100 10 line
49400 43100 49400 43900 10 line
49400 43900 48600 43900 10 line
48600 43900 48600 43100 10 line
gsave
false false false false 260.000000 [(TEMPERATURE SENSOR) ] 0 48000 44000 180.555557 text
grestore
49600 43700 49400 43700 10 line
gsave
false true false false 260.000000 [(SCK) ] 0 49845 43495 180.555557 text
grestore
49600 43300 49400 43300 10 line
gsave
false true false false 260.000000 [(SDA) ] 0 49845 43095 180.555557 text
grestore
49600 43700 50300 43700 10 line
49600 43300 50700 43300 10 line
gsave
false false false false 260.000000 [(MPC) (9808) ] 0 48800 43400 180.555557 text
grestore
49800 48700 50000 48700 10 line
gsave
false false false false 260.000000 [(AREF) ] 0 49455 48495 180.555557 text
grestore
45700 48100 45700 47900 10 line
49800 48700 45700 48700 10 line
45700 48700 45700 48100 10 line
gsave
false false false false 260.000000 [(Multi Pixel Photon Counter "Spectrum") (MTT Frontend Prototype) ] 0 50400 40800 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 53900 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 50000 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51500 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(Weinstock, Lars Steffen, B.Sc. RWTH) ] 0 53900 40100 180.555557 text
grestore
newpath
41000 42200
25
0 360 arc
fill
newpath
41000 42200
25
0 360 arc
fill
newpath
41000 42200
25
0 360 arc
fill
newpath
43000 42200
25
0 360 arc
fill
newpath
43000 42200
25
0 360 arc
fill
newpath
43000 42200
25
0 360 arc
fill
newpath
45500 44700
25
0 360 arc
fill
newpath
45500 44700
25
0 360 arc
fill
newpath
45500 44700
25
0 360 arc
fill
newpath
50300 47700
25
0 360 arc
fill
newpath
50300 47700
25
0 360 arc
fill
newpath
50300 47700
25
0 360 arc
fill
newpath
50300 45700
25
0 360 arc
fill
newpath
50700 47300
25
0 360 arc
fill
newpath
50700 47300
25
0 360 arc
fill
newpath
50700 47300
25
0 360 arc
fill
newpath
50700 44900
25
0 360 arc
fill
newpath
50300 45700
25
0 360 arc
fill
newpath
50300 45700
25
0 360 arc
fill
newpath
50700 44900
25
0 360 arc
fill
newpath
50700 44900
25
0 360 arc
fill
showpage
%%End
