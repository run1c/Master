%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Feb 20 10:09:47 2014
%%Title: /Users/runic/Documents/Uni Krams/Master/MPPC_D2/layout/amp_v2/amp_test_board.sch
%%Author: runic
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
47100 46700 47100 45900 10 line
47100 46700 47700 46300 10 line
47700 46300 47100 45900 10 line
47200 46150 47200 46050 10 line
47150 46100 47250 46100 10 line
47150 46500 47250 46500 10 line
46900 46100 47100 46100 10 line
gsave
false true false false 208.000000 [(3) ] 0 47050 46150 144.444443 text
grestore
46900 46500 47100 46500 10 line
gsave
false true false false 208.000000 [(2) ] 0 47050 46550 144.444443 text
grestore
47700 46300 47900 46300 10 line
gsave
false false false false 208.000000 [(1) ] 0 47775 46150 144.444443 text
grestore
47400 46500 47400 46700 10 line
gsave
false false false false 208.000000 [(10) ] 0 47450 46500 144.444443 text
grestore
gsave
true false false true 208.000000 [(V+) ] 0 47400 46500 144.444443 text
grestore
47400 46100 47400 45900 10 line
gsave
false false false false 208.000000 [(4) ] 0 47450 46000 144.444443 text
grestore
gsave
true false false false 208.000000 [(V-) ] 0 47400 46100 144.444443 text
grestore
47625 46550 47625 46350 10 line
gsave
false false false true 208.000000 [(/SHDN) ] 0 47655 46625 144.444443 text
grestore
gsave
false true false true 208.000000 [(5) ] 0 47755 46500 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U1) ] 0 47100 46800 180.555557 text
grestore
gsave
48800 46300 49000 46300 10 line
49700 46300 49500 46300 10 line
49200 46500 49200 46100 10 line
49300 46500 49300 46100 10 line
49500 46300 49300 46300 10 line
49200 46300 49000 46300 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 0 49000 46800 180.555557 text
grestore
gsave
false false false false 260.000000 [(100pF) ] 0 49000 46600 180.555557 text
grestore
gsave
50100 45700 49900 45800 10 line
49900 45800 50100 45900 10 line
50100 45900 49900 46000 10 line
49900 46000 50100 46100 10 line
50100 45700 49900 45600 10 line
49900 45600 50000 45550 10 line
50000 45400 50000 45550 10 line
50000 46300 50000 46148 10 line
50100 46099 50000 46150 10 line
newpath
50000 46300
25
0 360 arc
fill
newpath
50000 46300
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(R3) ] 0 49800 45700 180.555557 text
grestore
gsave
false true false true 260.000000 [(62) ] 0 49800 45900 180.555557 text
grestore
51000 46700 51500 46700 10 line
49700 46300 51500 46300 10 line
52500 46500 53200 46500 10 line
gsave
52000 47100 52000 47300 10 line
51850 47300 52150 47300 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 51875 47350 144.444443 text
grestore
grestore
gsave
47400 46900 47400 47100 10 line
47250 47100 47550 47100 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 47275 47150 144.444443 text
grestore
grestore
gsave
47400 45700 47400 45500 10 line
47550 45500 47250 45500 10 line
gsave
false true false true 208.000000 [(Vee) ] 0 47525 45450 144.444443 text
grestore
grestore
gsave
52000 45900 52000 45700 10 line
52150 45700 51850 45700 10 line
gsave
false true false true 208.000000 [(Vee) ] 0 52125 45650 144.444443 text
grestore
grestore
gsave
46400 46100 46600 46100 10 line
46400 46200 46400 46000 10 line
46350 46145 46350 46055 10 line
46310 46120 46310 46080 10 line
grestore
47400 46900 47400 46700 10 line
47400 46800 47625 46800 10 line
47625 46800 47625 46550 10 line
52000 47100 52000 46900 10 line
52000 47000 52225 47000 10 line
52225 47000 52225 46750 10 line
52000 45900 52000 46100 10 line
47400 45700 47400 45900 10 line
47900 46300 48800 46300 10 line
gsave
47600 47600 47500 47400 10 line
47500 47400 47400 47600 10 line
47400 47600 47300 47400 10 line
47300 47400 47200 47600 10 line
47600 47600 47700 47400 10 line
47700 47400 47750 47500 10 line
47900 47500 47750 47500 10 line
47000 47500 47152 47500 10 line
47201 47600 47150 47500 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 47200 47900 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 47200 47700 180.555557 text
grestore
46100 46500 46900 46500 10 line
46600 46500 46600 47500 10 line
46600 47500 47000 47500 10 line
47900 47500 48200 47500 10 line
48200 47500 48200 46300 10 line
51200 46700 51200 47900 10 line
51200 47900 51500 47900 10 line
gsave
52100 48000 52000 47800 10 line
52000 47800 51900 48000 10 line
51900 48000 51800 47800 10 line
51800 47800 51700 48000 10 line
52100 48000 52200 47800 10 line
52200 47800 52250 47900 10 line
52400 47900 52250 47900 10 line
51500 47900 51652 47900 10 line
51701 48000 51650 47900 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 0 51700 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(240) ] 0 51700 48100 180.555557 text
grestore
52400 47900 52800 47900 10 line
52800 47900 52800 46500 10 line
gsave
45800 46600 45700 46400 10 line
45700 46400 45600 46600 10 line
45600 46600 45500 46400 10 line
45500 46400 45400 46600 10 line
45800 46600 45900 46400 10 line
45900 46400 45950 46500 10 line
46100 46500 45950 46500 10 line
45200 46500 45352 46500 10 line
45401 46600 45350 46500 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 45400 46900 180.555557 text
grestore
gsave
false false false false 260.000000 [(10) ] 0 45400 46700 180.555557 text
grestore
gsave
53200 46500 53400 46500 10 line
54100 46500 53900 46500 10 line
53600 46700 53600 46300 10 line
53700 46700 53700 46300 10 line
53900 46500 53700 46500 10 line
53600 46500 53400 46500 10 line
grestore
gsave
false false false false 260.000000 [(C2) ] 0 53400 47000 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 53400 46800 180.555557 text
grestore
gsave
54900 46600 54800 46400 10 line
54800 46400 54700 46600 10 line
54700 46600 54600 46400 10 line
54600 46400 54500 46600 10 line
54900 46600 55000 46400 10 line
55000 46400 55050 46500 10 line
55200 46500 55050 46500 10 line
54300 46500 54452 46500 10 line
54501 46600 54450 46500 10 line
grestore
gsave
false false false false 260.000000 [(R6) ] 0 54500 47000 180.555557 text
grestore
gsave
false false false false 260.000000 [(50) ] 0 54500 46800 180.555557 text
grestore
54300 46500 54100 46500 10 line
46600 46100 46900 46100 10 line
gsave
55900 45900 55900 46100 10 line
55800 45900 56000 45900 10 line
55855 45850 55945 45850 10 line
55880 45810 55920 45810 10 line
grestore
55200 46500 55400 46500 10 line
gsave
55400 46500 55600 46500 10 line
gsave
false true false false 260.000000 [(1) ] 0 55555 46320 180.555557 text
grestore
55900 46500 200 90 270 6 darc
55600 46500 55900 46500 6 line
55900 46100 55900 46300 10 line
gsave
false true false false 260.000000 [(2) ] 0 55805 46150 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(LEMO_OUT) ] 0 55600 46800 180.555557 text
grestore
gsave
42200 43000 42000 43000 10 line
gsave
false true false false 208.000000 [(1) ] 0 41850 43000 144.444443 text
grestore
41950 43000 50 0 360 10 darc
42200 42600 42000 42600 10 line
gsave
false true false false 208.000000 [(2) ] 0 41850 42600 144.444443 text
grestore
41950 42600 50 0 360 10 darc
42200 42200 42000 42200 10 line
gsave
false true false false 208.000000 [(3) ] 0 41850 42200 144.444443 text
grestore
41950 42200 50 0 360 10 darc
42200 41800 42000 41800 10 line
gsave
false true false false 208.000000 [(4) ] 0 41850 41800 144.444443 text
grestore
41950 41800 50 0 360 10 darc
42200 41400 42000 41400 10 line
gsave
false true false false 208.000000 [(5) ] 0 41850 41400 144.444443 text
grestore
41950 41400 50 0 360 10 darc
42200 41000 42000 41000 10 line
gsave
false true false false 208.000000 [(6) ] 0 41850 41000 144.444443 text
grestore
41950 41000 50 0 360 10 darc
41500 40600 41900 40600 10 line
41900 40600 41900 43400 10 line
41900 43400 41500 43400 10 line
41500 43400 41500 40600 10 line
grestore
gsave
false false false false 260.000000 [(CONN_APDPI) ] 0 41500 43500 180.555557 text
grestore
gsave
42400 43000 42600 43000 10 line
42600 42900 42600 43100 10 line
gsave
false false true false 260.000000 [(NC) ] 0 42650 43000 180.555557 text
grestore
grestore
gsave
42400 41000 42600 41000 10 line
42600 40900 42600 41100 10 line
gsave
false false true false 260.000000 [(NC) ] 0 42650 41000 180.555557 text
grestore
grestore
gsave
42400 41400 42600 41400 10 line
42600 41300 42600 41500 10 line
gsave
false false true false 260.000000 [(NC) ] 0 42650 41400 180.555557 text
grestore
grestore
gsave
42400 42200 42600 42200 10 line
42600 42350 42600 42050 10 line
gsave
false false false false 208.000000 [(Vcc) ] 270 42650 42325 144.444443 text
grestore
grestore
gsave
42400 42600 42600 42600 10 line
42600 42750 42600 42450 10 line
gsave
false false false false 208.000000 [(Vee) ] 270 42650 42725 144.444443 text
grestore
grestore
gsave
42600 41800 42400 41800 10 line
42600 41700 42600 41900 10 line
42650 41755 42650 41845 10 line
42690 41780 42690 41820 10 line
grestore
42400 43000 42200 43000 10 line
42400 41000 42200 41000 10 line
42400 41400 42200 41400 10 line
42400 42200 42200 42200 10 line
42400 42600 42200 42600 10 line
42400 41800 42200 41800 10 line
gsave
45100 43200 45300 43200 10 line
gsave
false true false false 260.000000 [(1) ] 0 45255 43020 180.555557 text
grestore
45600 43200 200 90 270 6 darc
45300 43200 45600 43200 6 line
45600 42800 45600 43000 10 line
gsave
false true false false 260.000000 [(2) ] 0 45505 42850 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(LEMO_HV) ] 0 45300 43500 180.555557 text
grestore
gsave
45600 42200 45600 42400 10 line
45500 42200 45700 42200 10 line
45555 42150 45645 42150 10 line
45580 42110 45620 42110 10 line
grestore
gsave
43700 43200 43500 43200 10 line
43500 43050 43500 43350 10 line
gsave
false false false false 208.000000 [(Vss) ] 90 43450 43075 144.444443 text
grestore
grestore
43700 43200 45100 43200 10 line
gsave
44100 46500 43900 46500 10 line
gsave
false true false true 208.000000 [(1) ] 0 43750 46500 144.444443 text
grestore
43850 46500 50 0 360 10 darc
44100 46900 43900 46900 10 line
gsave
false true false true 208.000000 [(2) ] 0 43750 46900 144.444443 text
grestore
43850 46900 50 0 360 10 darc
43400 46100 43800 46100 10 line
43800 46100 43800 47300 10 line
43800 47300 43400 47300 10 line
43400 47300 43400 46100 10 line
grestore
gsave
false false false true 260.000000 [(CONN_SiPM) ] 0 42700 46000 180.555557 text
grestore
44100 46500 45200 46500 10 line
44500 46500 44500 45700 10 line
gsave
44400 45400 44600 45300 10 line
44600 45300 44400 45200 10 line
44400 45200 44600 45100 10 line
44600 45100 44400 45000 10 line
44400 45400 44600 45500 10 line
44600 45500 44500 45550 10 line
44500 45700 44500 45550 10 line
44500 44800 44500 44952 10 line
44400 45001 44500 44950 10 line
grestore
gsave
false false false false 260.000000 [(R0) ] 0 44700 45300 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 44700 45100 180.555557 text
grestore
gsave
44500 44400 44500 44600 10 line
44400 44400 44600 44400 10 line
44455 44350 44545 44350 10 line
44480 44310 44520 44310 10 line
grestore
44100 46900 44500 46900 10 line
44500 46900 44500 47800 10 line
gsave
44500 47800 44500 48000 10 line
44350 48000 44650 48000 10 line
gsave
false false false false 208.000000 [(Vss) ] 0 44375 48050 144.444443 text
grestore
grestore
45600 42400 45600 42800 10 line
gsave
44300 42600 44500 42600 10 line
45200 42600 45000 42600 10 line
44700 42800 44700 42400 10 line
44800 42800 44800 42400 10 line
45000 42600 44800 42600 10 line
44700 42600 44500 42600 10 line
grestore
gsave
false false false false 260.000000 [(C_HV) ] 0 44400 42100 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF/100V) ] 0 44400 41900 180.555557 text
grestore
45200 42600 45600 42600 10 line
44300 42600 44000 42600 10 line
44000 42600 44000 43200 10 line
44500 44600 44500 44800 10 line
gsave
44500 43200 44500 43400 10 line
44400 43500 44500 43400 10 line
44500 43400 44600 43500 10 line
44400 43500 44500 43600 10 line
44500 43600 44600 43500 10 line
newpath
44500 43200
25
0 360 arc
fill
newpath
44500 43200
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(TP_HV) ] 0 44500 43600 180.555557 text
grestore
gsave
48500 46300 48500 46100 10 line
48600 46000 48500 46100 10 line
48500 46100 48400 46000 10 line
48600 46000 48500 45900 10 line
48500 45900 48400 46000 10 line
newpath
48500 46300
25
0 360 arc
fill
newpath
48500 46300
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(TP_PreAmp) ] 0 48900 45700 180.555557 text
grestore
gsave
53000 46500 53000 46300 10 line
53100 46200 53000 46300 10 line
53000 46300 52900 46200 10 line
53100 46200 53000 46100 10 line
53000 46100 52900 46200 10 line
newpath
53000 46500
25
0 360 arc
fill
newpath
53000 46500
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(TP_Diff) ] 0 53200 45900 180.555557 text
grestore
gsave
47700 43100 47900 43100 10 line
48600 43100 48400 43100 10 line
48100 43300 48100 42900 10 line
48200 43300 48200 42900 10 line
48400 43100 48200 43100 10 line
48100 43100 47900 43100 10 line
grestore
gsave
false false false false 260.000000 [(C3) ] 0 47950 43550 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 47950 43350 180.555557 text
grestore
gsave
47500 43100 47300 43100 10 line
47300 42950 47300 43250 10 line
gsave
false false false false 208.000000 [(Vcc) ] 90 47250 42975 144.444443 text
grestore
grestore
gsave
49000 43100 48800 43100 10 line
49000 43000 49000 43200 10 line
49050 43055 49050 43145 10 line
49090 43080 49090 43120 10 line
grestore
47500 43100 47700 43100 10 line
48800 43100 48600 43100 10 line
gsave
47700 42200 47900 42200 10 line
48600 42200 48400 42200 10 line
48100 42400 48100 42000 10 line
48200 42400 48200 42000 10 line
48400 42200 48200 42200 10 line
48100 42200 47900 42200 10 line
grestore
gsave
false false false false 260.000000 [(C4) ] 0 47950 42650 180.555557 text
grestore
gsave
false false false false 260.000000 [(100nF) ] 0 47950 42450 180.555557 text
grestore
gsave
49000 42200 48800 42200 10 line
49000 42100 49000 42300 10 line
49050 42155 49050 42245 10 line
49090 42180 49090 42220 10 line
grestore
47500 42200 47700 42200 10 line
48800 42200 48600 42200 10 line
gsave
47500 42200 47300 42200 10 line
47300 42050 47300 42350 10 line
gsave
false false false false 208.000000 [(Vee) ] 90 47250 42075 144.444443 text
grestore
grestore
gsave
51700 46900 51700 46100 10 line
51700 46900 52300 46500 10 line
52300 46500 51700 46100 10 line
51800 46350 51800 46250 10 line
51750 46300 51850 46300 10 line
51750 46700 51850 46700 10 line
51500 46300 51700 46300 10 line
gsave
false true false false 208.000000 [(7) ] 0 51650 46350 144.444443 text
grestore
51500 46700 51700 46700 10 line
gsave
false true false false 208.000000 [(8) ] 0 51650 46750 144.444443 text
grestore
52300 46500 52500 46500 10 line
gsave
false false false false 208.000000 [(9) ] 0 52375 46350 144.444443 text
grestore
52000 46700 52000 46900 10 line
gsave
false false false false 208.000000 [(10) ] 0 52050 46700 144.444443 text
grestore
gsave
true false false true 208.000000 [(V+) ] 0 52000 46700 144.444443 text
grestore
52000 46300 52000 46100 10 line
gsave
false false false false 208.000000 [(4) ] 0 52050 46200 144.444443 text
grestore
gsave
true false false false 208.000000 [(V-) ] 0 52000 46300 144.444443 text
grestore
52225 46750 52225 46550 10 line
gsave
false false false true 208.000000 [(/SHDN) ] 0 52255 46825 144.444443 text
grestore
gsave
false true false true 208.000000 [(6) ] 0 52355 46700 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(U1) ] 0 51700 47000 180.555557 text
grestore
gsave
50000 45200 50000 45400 10 line
49900 45200 50100 45200 10 line
49955 45150 50045 45150 10 line
49980 45110 50020 45110 10 line
grestore
gsave
50400 46600 50500 46800 10 line
50500 46800 50600 46600 10 line
50600 46600 50700 46800 10 line
50700 46800 50800 46600 10 line
50400 46600 50300 46800 10 line
50300 46800 50250 46700 10 line
50100 46700 50250 46700 10 line
51000 46700 50848 46700 10 line
50799 46600 50850 46700 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 0 50300 47100 180.555557 text
grestore
gsave
false false false false 260.000000 [(62) ] 0 50300 46900 180.555557 text
grestore
gsave
49800 46700 50000 46700 10 line
49800 46800 49800 46600 10 line
49750 46745 49750 46655 10 line
49710 46720 49710 46680 10 line
grestore
50000 46700 50100 46700 10 line
newpath
50000 46300
25
0 360 arc
fill
newpath
50000 46300
25
0 360 arc
fill
newpath
51200 46700
25
0 360 arc
fill
newpath
50000 46300
25
0 360 arc
fill
newpath
52800 46500
25
0 360 arc
fill
newpath
53000 46500
25
0 360 arc
fill
newpath
47400 46800
25
0 360 arc
fill
newpath
47400 46800
25
0 360 arc
fill
newpath
47400 46800
25
0 360 arc
fill
newpath
52000 47000
25
0 360 arc
fill
newpath
52000 47000
25
0 360 arc
fill
newpath
52000 47000
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
48500 46300
25
0 360 arc
fill
newpath
46600 46500
25
0 360 arc
fill
newpath
46600 46500
25
0 360 arc
fill
newpath
46600 46500
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
48200 46300
25
0 360 arc
fill
newpath
51200 46700
25
0 360 arc
fill
newpath
51200 46700
25
0 360 arc
fill
newpath
52800 46500
25
0 360 arc
fill
newpath
52800 46500
25
0 360 arc
fill
newpath
44000 43200
25
0 360 arc
fill
newpath
44500 43200
25
0 360 arc
fill
newpath
44500 46500
25
0 360 arc
fill
newpath
44500 46500
25
0 360 arc
fill
newpath
44500 46500
25
0 360 arc
fill
newpath
45600 42600
25
0 360 arc
fill
newpath
45600 42600
25
0 360 arc
fill
newpath
45600 42600
25
0 360 arc
fill
newpath
44000 43200
25
0 360 arc
fill
newpath
44000 43200
25
0 360 arc
fill
newpath
44500 43200
25
0 360 arc
fill
newpath
44500 43200
25
0 360 arc
fill
newpath
48500 46300
25
0 360 arc
fill
newpath
48500 46300
25
0 360 arc
fill
newpath
53000 46500
25
0 360 arc
fill
newpath
53000 46500
25
0 360 arc
fill
showpage
%%End
